import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:1.17")
    }
}

plugins {
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'jacoco'
	id 'maven-publish'
}

group = 'br.com.sanfelice'

/**
	Definição da versão
 */
def appFile = "$projectDir/src/main/resources/application.yml"
def app = new Yaml().load( new File(appFile).newInputStream() )   
def ver = new StringBuilder()
        .append(app.versao.major)
        .append(".${app.versao.minor}")
        .append(".${app.versao.release}")
        
version = ver.toString()


sourceCompatibility = '11'
targetCompatibility = 11

compileJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
    javadoc.options.encoding = 'UTF-8'
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    testImplementation('org.hamcrest:hamcrest-core:1.3')
    testImplementation('org.hamcrest:hamcrest-library:1.3')
    testImplementation('org.mockito:mockito-core:1.9.+')
}

// def criarCommitVersao = { versao ->
//     def stdout = new ByteArrayOutputStream()
// 	println versao
//     exec {
//         commandLine 'git', 'commit', '-a', '-m', 'Entrega de versão ' + versao + ' | Data: ' + LocalDate.now().toString()
//         standardOutput = stdout
//     }
// 	println stdout.toString()
//     return stdout.toString().trim()
// }

task release {
	
	doFirst {
		ant.replaceregexp(file: appFile, match:'release: ' + app.versao.release++, replace:'release: ' + app.versao.release, flags:'g', byline:true)
		ant.replaceregexp(file: appFile, match:'data: [0-9]{4}-[0-9]{2}-[0-9]{2}', replace:'data: ' + LocalDate.now().toString(), flags:'g', byline:true)
		project.version = new StringBuilder()
		.append(app.versao.major)
		.append(".${app.versao.minor}")
		.append(".${app.versao.release}").toString()
	}
	doLast {
		build
	}
	doLast {
		println 'v'+version
	}
}

task data {
	doLast {
		println LocalDate.now().toString()
	}
}

task getVersion {
	doLast{
		println 'v'+version
	}
}

task a {

}

jacoco {
    toolVersion = "0.8.5"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
    finalizedBy jacocoTestCoverageVerification 
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 1.00
            }
            limit {
                minimum = 1.00
            }
        }
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'springlibci'
            from components.java
        }
    }
    repositories {
        maven {
            name = "SpringLibCI"
            url = "https://maven.pkg.github.com/ricardosanfelice/springlibci"
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("USERNAME")
                password = project.findProperty("github.token") ?: System.getenv("TOKEN")
            }
        }
    }
}